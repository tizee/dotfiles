#!/usr/bin/env zsh
# macOS Proxy Manager - Manage system-level proxy settings

# Terminal colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No color

# Default values (if environment variables are not set)
DEFAULT_HTTP_PROXY_HOST="127.0.0.1"
DEFAULT_HTTP_PROXY_PORT="1087"
DEFAULT_SOCKS_PROXY_HOST="127.0.0.1"
DEFAULT_SOCKS_PROXY_PORT="1080"

# Get current active network service
get_active_network_service() {
  # Get all network services
  local all_services=$(networksetup -listallnetworkservices | sed '1d')

  # Check if Wi-Fi is available and not disabled
  if echo "$all_services" | grep -q "Wi-Fi" && ! echo "$all_services" | grep -q "^\*.*Wi-Fi"; then
    echo "Wi-Fi"
    return
  fi

  # Otherwise, get the first non-disabled service
  local first_active=$(echo "$all_services" | grep -v "^\*" | head -1)
  echo "$first_active"
}

# Extract host from proxy URL
extract_host() {
  local proxy_url=$1
  if [[ -z "$proxy_url" ]]; then
    return
  fi

  # Remove protocol prefix
  local host_port=${proxy_url#*://}
  # If no protocol prefix, use the entire URL
  if [[ "$host_port" == "$proxy_url" ]]; then
    host_port=$proxy_url
  fi

  # Extract host part (remove port)
  local host=${host_port%:*}
  # If no port, host and host_port are the same
  if [[ "$host" == "$host_port" ]]; then
    # Check if there's username/password
    if [[ "$host" == *"@"* ]]; then
      host=${host#*@}
    fi
  else
    # Check if there's username/password
    if [[ "$host" == *"@"* ]]; then
      host=${host#*@}
    fi
  fi

  echo "$host"
}

# Extract port from proxy URL
extract_port() {
  local proxy_url=$1
  if [[ -z "$proxy_url" ]]; then
    return
  fi

  # Try to find port number
  if [[ "$proxy_url" == *":"*"/"* ]]; then
    # If URL has a path, remove the path first
    local without_path=${proxy_url%/*}
    echo ${without_path##*:}
  elif [[ "$proxy_url" == *":"* ]]; then
    # Directly extract port
    echo ${proxy_url##*:}
  fi
}

# Get HTTP proxy settings from environment variables
get_http_proxy_host() {
  local host=""

  # Prioritize http_proxy environment variable
  if [[ -n "$http_proxy" ]]; then
    host=$(extract_host "$http_proxy")
  elif [[ -n "$HTTP_PROXY" ]]; then
    host=$(extract_host "$HTTP_PROXY")
  elif [[ -n "$all_proxy" ]]; then
    host=$(extract_host "$all_proxy")
  elif [[ -n "$ALL_PROXY" ]]; then
    host=$(extract_host "$ALL_PROXY")
  fi

  # If not set, use default value
  if [[ -z "$host" ]]; then
    host="$DEFAULT_HTTP_PROXY_HOST"
  fi

  echo "$host"
}

get_http_proxy_port() {
  local port=""

  # Prioritize http_proxy environment variable
  if [[ -n "$http_proxy" ]]; then
    port=$(extract_port "$http_proxy")
  elif [[ -n "$HTTP_PROXY" ]]; then
    port=$(extract_port "$HTTP_PROXY")
  elif [[ -n "$all_proxy" ]]; then
    port=$(extract_port "$all_proxy")
  elif [[ -n "$ALL_PROXY" ]]; then
    port=$(extract_port "$ALL_PROXY")
  fi

  # If not set, use default value
  if [[ -z "$port" ]]; then
    port="$DEFAULT_HTTP_PROXY_PORT"
  fi

  echo "$port"
}

# Get SOCKS proxy settings from environment variables
get_socks_proxy_host() {
  local host=""

  # Check if there are specific SOCKS proxy settings
  if [[ -n "$socks_proxy" ]]; then
    host=$(extract_host "$socks_proxy")
  elif [[ -n "$SOCKS_PROXY" ]]; then
    host=$(extract_host "$SOCKS_PROXY")
  # If all_proxy starts with socks, prioritize it
  elif [[ -n "$all_proxy" && "$all_proxy" == socks* ]]; then
    host=$(extract_host "$all_proxy")
  elif [[ -n "$ALL_PROXY" && "$ALL_PROXY" == socks* ]]; then
    host=$(extract_host "$ALL_PROXY")
  # Otherwise try to use http_proxy
  elif [[ -n "$http_proxy" ]]; then
    host=$(extract_host "$http_proxy")
  elif [[ -n "$HTTP_PROXY" ]]; then
    host=$(extract_host "$HTTP_PROXY")
  elif [[ -n "$all_proxy" ]]; then
    host=$(extract_host "$all_proxy")
  fi

  # If not set, use default value
  if [[ -z "$host" ]]; then
    host="$DEFAULT_SOCKS_PROXY_HOST"
  fi

  echo "$host"
}

get_socks_proxy_port() {
  local port=""

  # Check if there are specific SOCKS proxy settings
  if [[ -n "$socks_proxy" ]]; then
    port=$(extract_port "$socks_proxy")
  elif [[ -n "$SOCKS_PROXY" ]]; then
    port=$(extract_port "$SOCKS_PROXY")
  # If all_proxy starts with socks, prioritize it
  elif [[ -n "$all_proxy" && "$all_proxy" == socks* ]]; then
    port=$(extract_port "$all_proxy")
  elif [[ -n "$ALL_PROXY" && "$ALL_PROXY" == socks* ]]; then
    port=$(extract_port "$ALL_PROXY")
  # Otherwise try to use http_proxy
  elif [[ -n "$http_proxy" ]]; then
    port=$(extract_port "$http_proxy")
  elif [[ -n "$HTTP_PROXY" ]]; then
    port=$(extract_port "$HTTP_PROXY")
  elif [[ -n "$all_proxy" ]]; then
    port=$(extract_port "$all_proxy")
  fi

  # If not set, use default value
  if [[ -z "$port" ]]; then
    port="$DEFAULT_SOCKS_PROXY_PORT"
  fi

  echo "$port"
}

# Get current HTTP proxy settings from system
get_system_http_proxy() {
  local service=$1
  local info=$(networksetup -getwebproxy "$service")
  local enabled=$(echo "$info" | grep "Enabled: Yes" >/dev/null && echo "Enabled" || echo "Disabled")
  local server=$(echo "$info" | grep "Server:" | awk '{print $2}')
  local port=$(echo "$info" | grep "Port:" | awk '{print $2}')

  echo "HTTP Proxy: $enabled ($server:$port)"
}

# Get current HTTPS proxy settings from system
get_system_https_proxy() {
  local service=$1
  local info=$(networksetup -getsecurewebproxy "$service")
  local enabled=$(echo "$info" | grep "Enabled: Yes" >/dev/null && echo "Enabled" || echo "Disabled")
  local server=$(echo "$info" | grep "Server:" | awk '{print $2}')
  local port=$(echo "$info" | grep "Port:" | awk '{print $2}')

  echo "HTTPS Proxy: $enabled ($server:$port)"
}

# Get current SOCKS proxy settings from system
get_system_socks_proxy() {
  local service=$1
  local info=$(networksetup -getsocksfirewallproxy "$service")
  local enabled=$(echo "$info" | grep "Enabled: Yes" >/dev/null && echo "Enabled" || echo "Disabled")
  local server=$(echo "$info" | grep "Server:" | awk '{print $2}')
  local port=$(echo "$info" | grep "Port:" | awk '{print $2}')

  echo "SOCKS Proxy: $enabled ($server:$port)"
}

# Check proxy status
check_proxy_status() {
  local service=$1
  echo "${MAGENTA}===== Proxy Status ($service) =====${NC}"

  # Check HTTP proxy
  echo "\n${CYAN}HTTP Proxy:${NC}"
  networksetup -getwebproxy "$service"

  # Check HTTPS proxy
  echo "\n${CYAN}HTTPS Proxy:${NC}"
  networksetup -getsecurewebproxy "$service"

  # Check SOCKS proxy
  echo "\n${CYAN}SOCKS Proxy:${NC}"
  networksetup -getsocksfirewallproxy "$service"

  # Check bypass domains
  echo "\n${CYAN}Bypass Domains:${NC}"
  networksetup -getproxybypassdomains "$service"

  # Brief summary
  local http_enabled=$(networksetup -getwebproxy "$service" | grep "Enabled: Yes" >/dev/null && echo "Enabled" || echo "Disabled")
  local https_enabled=$(networksetup -getsecurewebproxy "$service" | grep "Enabled: Yes" >/dev/null && echo "Enabled" || echo "Disabled")
  local socks_enabled=$(networksetup -getsocksfirewallproxy "$service" | grep "Enabled: Yes" >/dev/null && echo "Enabled" || echo "Disabled")

  echo "\n${YELLOW}Summary:${NC}"
  echo "HTTP Proxy: ${http_enabled}"
  echo "HTTPS Proxy: ${https_enabled}"
  echo "SOCKS Proxy: ${socks_enabled}"

  # Show comparison between environment variable settings and actual system settings
  echo "\n${YELLOW}Environment Variable Parse Results vs System Current Settings:${NC}"
  echo "Environment HTTP Proxy: $(get_http_proxy_host):$(get_http_proxy_port)"
  echo "Environment SOCKS Proxy: $(get_socks_proxy_host):$(get_socks_proxy_port)"
}

# Show current environment variable settings
show_env_settings() {
  local service=$(get_active_network_service)

  echo "${YELLOW}Current Environment Variable Settings:${NC}"
  echo "http_proxy=${http_proxy:-Not set}"
  echo "https_proxy=${https_proxy:-Not set}"
  echo "all_proxy=${all_proxy:-Not set}"
  echo "socks_proxy=${socks_proxy:-Not set}"

  echo "\n${YELLOW}Parsed Proxy Information:${NC}"
  echo "HTTP Proxy: $(get_http_proxy_host):$(get_http_proxy_port)"
  echo "SOCKS Proxy: $(get_socks_proxy_host):$(get_socks_proxy_port)"

  echo "\n${YELLOW}System Current Settings ($service):${NC}"
  get_system_http_proxy "$service"
  get_system_https_proxy "$service"
  get_system_socks_proxy "$service"
}

# Enable proxy
enable_proxy() {
  local service=$1
  local http_host=$(get_http_proxy_host)
  local http_port=$(get_http_proxy_port)
  local socks_host=$(get_socks_proxy_host)
  local socks_port=$(get_socks_proxy_port)

  echo "${MAGENTA}===== Enable Proxy ($service) =====${NC}"
  show_env_settings

  # Set HTTP proxy
  networksetup -setwebproxy "$service" "$http_host" "$http_port"

  # Set HTTPS proxy
  networksetup -setsecurewebproxy "$service" "$http_host" "$http_port"

  # Set SOCKS proxy
  networksetup -setsocksfirewallproxy "$service" "$socks_host" "$socks_port"

  echo "${GREEN}✓ Successfully enabled proxy${NC}"
}

# Disable proxy
disable_proxy() {
  local service=$1

  echo "${MAGENTA}===== Disable Proxy ($service) =====${NC}"

  # Disable HTTP proxy
  networksetup -setwebproxystate "$service" off

  # Disable HTTPS proxy
  networksetup -setsecurewebproxystate "$service" off

  # Disable SOCKS proxy
  networksetup -setsocksfirewallproxystate "$service" off

  echo "${GREEN}✓ Successfully disabled proxy${NC}"
}

# Show usage help
show_usage() {
  echo "${CYAN}Usage:${NC}"
  echo "  $0 ${GREEN}status${NC}          - Check current proxy status"
  echo "  $0 ${GREEN}on${NC}              - Enable system proxy"
  echo "  $0 ${GREEN}off${NC}             - Disable system proxy"
  echo "  $0 ${GREEN}env${NC}             - Show current environment variable settings"
  echo "  $0 ${GREEN}help${NC}            - Show this help information"
  echo
  echo "${YELLOW}Supported Environment Variables:${NC}"
  echo "  http_proxy / HTTP_PROXY   - HTTP proxy (e.g.: http://127.0.0.1:7890)"
  echo "  https_proxy / HTTPS_PROXY - HTTPS proxy (e.g.: http://127.0.0.1:7890)"
  echo "  all_proxy / ALL_PROXY     - Proxy for all protocols (e.g.: http://127.0.0.1:7890)"
  echo "  socks_proxy / SOCKS_PROXY - SOCKS proxy (e.g.: socks5://127.0.0.1:1080)"
  echo
  echo "${YELLOW}Default Values:${NC}"
  echo "  HTTP Proxy: $DEFAULT_HTTP_PROXY_HOST:$DEFAULT_HTTP_PROXY_PORT"
  echo "  SOCKS Proxy: $DEFAULT_SOCKS_PROXY_HOST:$DEFAULT_SOCKS_PROXY_PORT"
}

# Main function
main() {
  local network_service=$(get_active_network_service)

  case "$1" in
    status)
      check_proxy_status "$network_service"
      ;;
    on)
      enable_proxy "$network_service"
      ;;
    off)
      disable_proxy "$network_service"
      ;;
    env)
      show_env_settings
      ;;
    help|--help|-h)
      show_usage
      ;;
    *)
      echo "${RED}Error: Unknown command '$1'${NC}" >&2
      show_usage
      exit 1
      ;;
  esac
}

# Execute main function
main "$@"
