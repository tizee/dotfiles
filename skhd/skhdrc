# === Rules === {{{
# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.
# }}}

# === Change Window Focus === {{{

# move focus between windows
# left
ctrl + cmd - h : yabai -m window --focus west
# down
ctrl + cmd - j : yabai -m window --focus south
# up
ctrl + cmd - k : yabai -m window --focus north
# right
ctrl + cmd - l : yabai -m window --focus east

# move focus between displays
# left
# alt - s : yabai -m display --focus west
# right
# alt - g : yabai -m display --focus right
# }}}

# === Modify Window Layout === {{{
# flip windows along y-axis
ctrl + cmd - y : yabai -m space --mirror y-axis

# flip windows along x-axis
ctrl + cmd - x : yabai -m space --mirror x-axis

# rotate layout clockwise
ctrl + cmd - r : yabai -m space --rotate 90

# float / unfloat window and center on screen
ctrl + cmd - t : yabai -m window --toggle float --grid 8:8:1:1:6:6

# make floating window fill left-half of screen
ctrl + cmd - 3 : yabai -m window --grid 1:2:0:0:1:1

# }}}

# === Modify Window Size === {{{
# balance size of windows
shift + alt - e : yabai -m space --balance

# decrease width on left
ctrl + cmd - a : yabai -m window --resize left:-20:0
# increase width on right
ctrl + cmd - d : yabai -m window --resize right:20:0
# decrease width on right
ctrl + cmd - z : yabai -m window --resize right:-20:0
# increase height on bottom
ctrl + cmd - s : yabai -m window --resize bottom:0:20
# decrease height on bottom
ctrl + cmd - c : yabai -m window --resize bottom:0:-20
# decrease height on top
ctrl + cmd - w : yabai -m window --resize top:0:-20

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip

# }}}

# === Move Window === {{{
# current to right
ctrl + cmd - 1 : yabai -m window --swap east

# current to bottom
ctrl + cmd - 2 : yabai -m window --warp south

# move window to prev and next space
shift + alt - p : yabai -m window --space prev;
shift + alt - n : yabai -m window --space next;

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# send window to desktop and follow focus
# shift + cmd - n : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - p : yabai -m window --space  prev; yabai -m space --focus prev

# send window to monitor and follow focus
# shift + alt - a  : yabai -m window --display next; yabai -m display --focus next
# shift + alt - d  : yabai -m window --display prev; yabai -m display --focus prev

# move window to space #
shift + alt - 1 : yabai -m window --space 1;
shift + alt - 2 : yabai -m window --space 2;
shift + alt - 3 : yabai -m window --space 3;
shift + alt - 4 : yabai -m window --space 4;
shift + alt - 5 : yabai -m window --space 5;
shift + alt - 6 : yabai -m window --space 6;
shift + alt - 7 : yabai -m window --space 7;

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
shift + alt - n : yabai -m space --create && \
                  index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                  yabai -m window --space "${index}" && \
                  yabai -m space --focus "${index}"
# }}}

# === Space Management === {{{

# fast focus space
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1
# cmd + alt - 2 : yabai -m space --focus 2
# cmd + alt - 3 : yabai -m space --focus 3
# cmd + alt - 4 : yabai -m space --focus 4

# }}}

# === Blacklist === {{{
# prevents skhd from monitoring events for listed processes.
# .blacklist [
# "wezterm"
# "firefox developer edition"
# ]
# }}}

# === Shortcuts === {{{
cmd - return : open /Applications/WezTerm.app
# restart yabai and skhd
ctrl + alt - r : yabai --restart-service; skhd --restart-service
# }}}

# vim:set et sw=2 ts=2 tw=120 ft=conf foldmethod=marker:
