# vim:ft=tmux:fdm=marker

# docs see https://man7.org/linux/man-pages/man1/tmux.1.html
# Sever-Session-Window-Pane

# server option
# true color https://github.com/tmux/tmux/issues/1246
set-option -g default-terminal "xterm-256color"
# set-option -ga terminal-overrides ",xterm-256color:Tc"

# terminal features
# set -sa terminal-features ""
# UTF-8
# set -sa terminal-features "256,clipboard,ccolour,cstyle,extkeys,focus,margins,overline,rectfill,RGB,strikethrough,sync,osc7,osc8"
# see https://github.com/tmux/tmux/pull/3240
set -ga terminal-features "*:hyperlinks"

# see https://man7.org/linux/man-pages/man1/tmux.1.html#TERMINFO_EXTENSIONS
set-option -s terminal-overrides ""
# just for eye-candy
# set cursor in tmux with CSI codes
# set-option -sa terminal-overrides ",xterm-256color:Tc,*:Ss=\033[%p1%d q:Se=\033[5 q"
# support OSC 8 sequence. That is, the hyperlinks
# see https://github.com/tmux/tmux/issues/911
# which is the same as hyperlinks feature
# set -sa terminal-overrides ',*:Hla=\033]8;;%p1%s\033\\:Hlr=\033]8;;\033\\'
# set -sa terminal-overrides ',*:Hls=\033]8;id=%p1%s;%p2%s\033\\\033]8;;\033\\'

# set -sa terminal-overrides ',*:Hls=\033]8;;\033\\'

# neglect id
# set -sa terminal-overrides ',*:Hls=\033]8;;%p2%s\033\\'

# use id
# set -sa terminal-overrides ',*:Hls=\033]8;id=%p1%s;%p2%s\033\\'

# terminfo if-condition
# set -sa terminal-overrides ',*:Hls=\033]8;%?%p1%s%tid=%p1%s%;;%p2%s\033\\'

# remap prefix from 'C-b' to 'C-a'
unbind-key C-b
unbind-key C-a
unbind-key C-d
set-option -g prefix C-a
# disable prefix2
set-option -g prefix2 None
bind-key -r C-a send-prefix
set-option -g mouse on

# menu
# bind-key -T prefix u display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -x P -y P "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}" < "send -X history-top" "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}" > "send -X history-bottom" '' "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r "if -F \"#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}\" \"copy-mode -t=\" ; send -Xt= search-backward \"#{q:mouse_word}\"" "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y "copy-mode -q ; send-keys -l -- \"#{q:mouse_word}\"" "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c "copy-mode -q ; set-buffer -- \"#{q:mouse_word}\"" "#{?mouse_line,Copy Line,}" l "copy-mode -q ; set-buffer -- \"#{q:mouse_line}\"" '' "Horizontal Split" h "split-window -h" "Vertical Split" v "split-window -v" '' "#{?#{>:#{window_panes},1},,-}Swap Up" u "swap-pane -U" "#{?#{>:#{window_panes},1},,-}Swap Down" d "swap-pane -D" "#{?pane_marked_set,,-}Swap Marked" s swap-pane '' Kill X kill-pane Respawn R "respawn-pane -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"

# DEBUG OSC strings
if-shell "[[ $DEBUG -eq 1 ]]" {
  display-message -p "DEBUG mode ON"
  bind-key M-p display-popup -T "[test]" -E -w 50% -h 80% -b "heavy" "zsh"
}

# BASIC OPTIONS {{{
# Change the default $TERM to tmux-256color
#set -g default-terminal "tmux-256color"

# Enable RGB colour if running in xterm(1)
# set-option -sa terminal-overrides ",xterm*:Tc"


# clipboard behavior
# - use xterm escape sequnce to set the terminal clipboard
# - set to on to both accept the escape sequence to create a buffer
# and attempt to set the terminal clipboard
set -g set-clipboard on

# swtich to another available session when exiting the last terminal in tmux session
set-option -g detach-on-destroy on

# neovim compatability
set-option -sg escape-time 10
# history limit
set -g history-limit 1024
# set -g history-file "~/.tmux/history"
# message limit by default is 100
set -g message-limit 100
# buffer limit
set -sg buffer-limit 5
# default editor
set -sg editor "nvim"

# on/off
# exit when there is no sessions
set -sg exit-empty on
# exit when there is no attached clients
set -sg exit-unattached off
# support extended keys from terminal
set -sg extended-keys on

# Mouse mode
# Please get used to the keyboard shortcuts
set -g mouse on
bind-key    -T copy-mode    MouseDown1Pane       select-pane
bind-key    -T copy-mode    MouseDrag1Pane       select-pane \; send-keys -X begin-selection
bind-key    -T copy-mode    MouseDragEnd1Pane    send-keys -X copy-pipe-and-cancel
bind-key    -T copy-mode    WheelUpPane          select-pane \; send-keys -X -N 5 scroll-up
bind-key    -T copy-mode    WheelDownPane        select-pane \; send-keys -X -N 5 scroll-down
bind-key    -T copy-mode    DoubleClick1Pane     select-pane \; send-keys -X select-word \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel
bind-key    -T copy-mode    TripleClick1Pane     select-pane \; send-keys -X select-line \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel
bind-key    -T root         MouseDown1Pane       select-pane -t = \; send-keys -M
bind-key    -T root         MouseDown1Status     select-window -t =
bind-key    -T root         MouseDown2Pane       select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" "send -M" "paste -p"
bind-key    -T root         MouseDown3Pane       if-shell -F -t = "#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}" "select-pane -t= ; send -M" "display-menu -t= -xM -yM -T \"#[align=centre]#{pane_index} (#{pane_id})\" \"#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}\" < \"send -X history-top\" \"#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}\" > \"send -X history-bottom\" '' \"#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}\" C-r \"if -F \\\"#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}\\\" \\\"copy-mode -t=\\\" ; send -Xt= search-backward \\\"#{q:mouse_word}\\\"\" \"#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}\" C-y \"copy-mode -q ; send-keys -l -- \\\"#{q:mouse_word}\\\"\" \"#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}\" c \"copy-mode -q ; set-buffer -- \\\"#{q:mouse_word}\\\"\" '' \"#{?mouse_hyperlink,Type #[underscore]#{=/9/...:mouse_hyperlink},}\" C-y \"copy-mode -q ; send-keys -l -- \\\"#{q:mouse_hyperlink}\\\"\" \"#{?mouse_line,Copy Line,}\" l \"copy-mode -q ; set-buffer -- \\\"#{q:mouse_line}\\\"\" '' \"Horizontal Split\" h \"split-window -h\" \"Vertical Split\" v \"split-window -v\" '' \"#{?#{>:#{window_panes},1},,-}Swap Up\" u \"swap-pane -U\" \"#{?#{>:#{window_panes},1},,-}Swap Down\" d \"swap-pane -D\" \"#{?pane_marked_set,,-}Swap Marked\" s swap-pane '' Kill X kill-pane Respawn R \"respawn-pane -k\" \"#{?pane_marked,Unmark,Mark}\" m \"select-pane -m\" \"#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}\" z \"resize-pane -Z\""

# Mouse {{{
bind-key    -T root         MouseDown3Status     display-menu -T "#[align=centre]#{window_index}:#{window_name}" -t = -x W -y W "#{?#{>:#{session_windows},1},,-}Swap Left" l "swap-window -t:-1" "#{?#{>:#{session_windows},1},,-}Swap Right" r "swap-window -t:+1" "#{?pane_marked_set,,-}Swap Marked" s swap-window '' Kill X kill-window Respawn R "respawn-window -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" Rename n "command-prompt -I \"#W\" \"rename-window -- '%%'\"" '' "New After" w "new-window -a" "New At End" W new-window
bind-key    -T root         MouseDown3StatusLeft display-menu -T "#[align=centre]#{session_name}" -t = -x M -y W Next n "switch-client -n" Previous p "switch-client -p" '' Renumber N "move-window -r" Rename n "command-prompt -I \"#S\" \"rename-session -- '%%'\"" '' "New Session" s new-session "New Window" w new-window
bind-key    -T root         MouseDrag1Pane       if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" "send -M" "copy-mode -M"
bind-key    -T root         MouseDrag1Border     resize-pane -M
bind-key    -T root         WheelUpPane          if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" "send -M" "copy-mode -e"
bind-key    -T root         WheelUpStatus        previous-window
bind-key    -T root         WheelDownStatus      next-window
bind-key    -T root         DoubleClick1Pane     select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" "send -M" "copy-mode -H ; send -X select-word ; run -d0.3 ; send -X copy-pipe-and-cancel"
bind-key    -T root         TripleClick1Pane     select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" "send -M" "copy-mode -H ; send -X select-line ; run -d0.3 ; send -X copy-pipe-and-cancel"
bind-key    -T root         M-MouseDown3Pane     display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -t = -x M -y M "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}" < "send -X history-top" "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}" > "send -X history-bottom" '' "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r "if -F \"#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}\" \"copy-mode -t=\" ; send -Xt= search-backward \"#{q:mouse_word}\"" "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y "copy-mode -q ; send-keys -l -- \"#{q:mouse_word}\"" "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c "copy-mode -q ; set-buffer -- \"#{q:mouse_word}\"" "#{?mouse_line,Copy Line,}" l "copy-mode -q ; set-buffer -- \"#{q:mouse_line}\"" '' "Horizontal Split" h "split-window -h" "Vertical Split" v "split-window -v" '' "#{?#{>:#{window_panes},1},,-}Swap Up" u "swap-pane -U" "#{?#{>:#{window_panes},1},,-}Swap Down" d "swap-pane -D" "#{?pane_marked_set,,-}Swap Marked" s swap-pane '' Kill X kill-pane Respawn R "respawn-pane -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"
# }}}

# Window/Pane {{{
# Start window numbering at 1
set -g base-index 1
setw -g pane-base-index 1

# renumber window when a window closed
set -g renumber-windows on
# clock style
setw -g clock-mode-style 24

# window vim mode
setw -g mode-keys vi
# status line mode
# emacs/vi
set -g status-keys vi

# window activity notifier
setw -g monitor-activity off
set -g visual-activity off
set -g visual-bell off
set -g visual-silence on
#setw -g visual-bell off
#set -g bell-action off

# exit dead panes for tmux-thumbs
# Keep windows around after they exit
set -g remain-on-exit off

# resize
setw -g aggressive-resize on

# for using vim-gitgutter
set -g focus-events on

# Window settings
set-window-option -g automatic-rename off
set-option -g set-titles on
set -g set-titles-string "#I:#W"

# Pane settings
# only use keybinding to toggle this behavior
set-window-option -g synchronize-panes off

# }}}

# }}}

# tmux list-keys -T key-table
# e.g. tmux list-keys -T copy-mode
# KEY MAPPINGS {{{

# Note: If use Kitty as terminal, the Meta key is not `Option` key in MacOSX
# https://github.com/kovidgoyal/kitty/issues/1793
# https://github.com/kovidgoyal/kitty/issues/155
# https://stackoverflow.com/questions/11876485/how-to-disable-generating-special-characters-when-pressing-the-alta-optiona
# fix path

# vertical split
bind-key '"' split-window -v -c "#{pane_current_path}"
# horizontal split
bind-key % split-window -h -c "#{pane_current_path}"

# paste buffer
bind-key ] paste-buffer -p

# create new window
bind-key c new-window -c '#{pane_current_path}'
bind-key C command-prompt -p "Name of new window: " "new-window -n '%%'"

# list clients
bind-key * list-clients
# list options (global/window/sever)
bind-key o show-options -gws
# join pane
bind-key g command-prompt -p "send pane to:" "join-pane -t %%"
# Link window
bind-key e command-prompt -p "Link window from (session:window): " "link-window -s %% -a"
# swap window
# swap with the previous window first then select the previous window
bind \{ swap-window -t -1\; select-window -t -1
bind \} swap-window -t +1\; select-window -t +1

# kill pane
# always use prefix key before killing operation
bind x kill-pane
bind X kill-window

# use tty-clock
# It's just an eye-candy and somehow delayed so restore to the default behavior
# unbind-key t
# bind-key t send-keys "tty-clock -c" Enter

# list key-bindings
unbind-key -n '?'
bind-key '?' list-keys

# reload
bind r source-file ~/.config/tmux/tmux.conf \; display-message "tmux config reloaded."
# create new session with current pane path
bind-key S source-file ~/.config/tmux/scripts/update_session_path

# If you use karabiner-element, you have to watch out for conflicts
# run RPELs to do some quick validation.
# For example, do some calculations
bind-key M-p display-popup -T "[IPython]" -E -w 50% -h 80% -b "heavy" "ipython"
bind-key -n M-p select-window -t +
# switch to session
bind-key -n M-f display-popup -T "switch client to" -E "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\" | fzf --reverse | xargs -I {} tmux switch-client -c #{client_name} -t {}"
# switch to last session
bind-key -n M-b switch-client -l
# switch to next pane
bind-key -n M-q select-pane -t :.+
# detach client from current session
bind-key -n M-d detach-client

# choose tree
# replace PREFIX w
unbind-key w
bind-key -n M-t choose-tree
# move current window to another session
bind-key C-w display-popup -E "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\" | fzf --reverse | xargs -I {} tmux move-window -t {}"
# move and append current pane to session as window
# use default format "#{session_name}:#{window_index}.#{pane_index}"
bind-key C-p display-popup -E "tmux list-sessions | sed -E 's/:.*$//'| fzf --reverse | xargs -I {} tmux break-pane -a -s \"$(tmux display-message -p '#S:#{window_index}.#{pane_index}')\" -t {}"

# mark
unbind m
bind-key -n M-m select-pane -m
bind-key -n M-M select-pane -M
# mark before joining pane
bind-key -n M-< join-pane

# break pane into window
bind-key ! break-pane

# workspace
# bind-key -n M-w new-session -A -s work "cd ~/dev/work && nvim"
# bind-key w display-popup -E -h 95% -w 95%  "tmux new-session -A -s work 'cd ~/dev/work && nvim'"

# Some extra key bindings to select higher numbered windows
bind F1 selectw -t:10
bind F2 selectw -t:11
bind F3 selectw -t:12
bind F4 selectw -t:13
bind F5 selectw -t:14
bind F6 selectw -t:15
bind F7 selectw -t:16
bind F8 selectw -t:17
bind F9 selectw -t:18
bind F10 selectw -t:19
bind F11 selectw -t:20
bind F12 selectw -t:21

# open in alacritty
# bind C run-shell -b 'alacritty --working-directory #{pane_current_path} -e tmux'

# reload (conflict with vim)
# bind C-r source-file ~/.tmux.conf \; display "Refleshed Configure!"

# HOOKS {{{
unbind-key O
bind O show-hooks -g  # show all hooks

set-hook -g client-attached 'display-message "🚧 Connect ✅"'
set-hook -g session-created 'clock-mode -t 1'
# set-hook -g window-linked 'selectw -n clock-mode -t 1'
# set-hook -g after-split-window 'selectl even-vertical'

# }}}

# MOVE AROUND {{{
# bind-key S new-session '#{sessin_path}'
# resize
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

# move between windows quickly
# Shift arrow to switch windows
bind-key -n -T prefix p previous-window
bind-key -n -T prefix n next-window

# unset for vim split movement
unbind-key -T root C-h
unbind-key -T root C-j
unbind-key -T root C-k
unbind-key -T root C-l

# use -n to avoid prefix
unbind-key -T root S-Up
unbind-key -T root S-Down
unbind-key -T root S-Left
unbind-key -T root S-Right
bind-key -T root S-Up select-pane -U
bind-key -T root S-Down select-pane -D
bind-key -T root S-Left select-pane -L
bind-key -T root S-Right select-pane -R

# combine with Meta key
# bind-key -n M-h resize-pane -L 5
# bind-key -n M-j resize-pane -D 5
# bind-key -n M-k resize-pane -U 5
# bind-key -n M-l resize-pane -R 5

# hjkl pane traversal
# bind-key h select-pane -L
# bind-key j select-pane -D
# bind-key k select-pane -U
# bind-key l select-pane -R

# swap pane
# bind-key > swap-pane -D       # swap current pane with the next one
bind-key < swap-pane -U       # swap current pane with the previous one

# }}}

# COPY MODE {{{
# config for vi/emacs key tables
# enter copy mode
unbind-key -T copy-mode-vi v
unbind-key -T copy-mode-vi C-v
unbind-key -T copy-mode-vi Enter

bind-key Enter copy-mode
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi C-v send -X rectangle-toggle

# vim copy to system clipboard
if-shell '[[ $(uname -s) = Linux ]]' {
   bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
   # Emacs like keybinding
   bind -T copy-mode M-w send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
} {
   unbind-key -T copy-mode M-Space
   # use M-space to activiate selection since C-Space conflicts with system key binding
   bind-key -T copy-mode M-Space send -X begin-selection
   # Do not need hack from https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
   bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
   # Emacs like keybinding
   bind -T copy-mode M-w send-keys -X copy-pipe-and-cancel "pbcopy"
}
# copy via osc 52
bind -T copy-mode-vi Y send-keys -X copy-pipe-and-cancel "osc-copy > #{pane_tty}"

# }}}

# Switch Session
# use default prefix-s

# tmux attach default session
# new-session -n $HOST

# Keys to toggle monitoring activity in a window and the synchronize-panes option
# bind-key m set monitor-activity
bind-key y set synchronize-panes\; display 'synchronize-panes #{?synchronize-panes,on,off}'
# }}}

# UI setting
source ~/.config/tmux/tmux-theme.conf

if-shell 'test "$(uname)" = "Darwin"' {
  source ~/.config/tmux/tmux.osx.conf
}
