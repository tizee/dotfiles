priority 1000

snippet lib
	library ${1};
	${0}
endsnippet

snippet im
	import 'package:${1}/${2}.dart';
	${0}
endsnippet
snippet rgx
	new RegExp(r'${1}')
endsnippet
snippet var
	var ${1} = ${2};
endsnippet
snippet main
	main() {
	  ${0}
	}
endsnippet

snippet st
	static ${0}
endsnippet

snippet fi
	final ${0}
endsnippet
snippet re
	return ${0}
endsnippet
snippet br
	break;
endsnippet
snippet th
	throw ${0}
endsnippet
snippet cl
	class ${1:`vim_endsnippet
snippets#Filename("", "untitled")`} ${0}
endsnippet
snippet in
	interface ${1:`vim_endsnippet
snippets#Filename("", "untitled")`} ${0}
endsnippet
snippet imp
	implements ${0}
endsnippet
snippet ext
	extends ${0}
endsnippet
snippet if
	if (${1:true}) {
	  ${0}
	}
endsnippet
snippet ife
	if (${1:true}) {
	  ${2}
	} else {
	  ${0}
	}
endsnippet
snippet el
	else
endsnippet
snippet sw
	switch (${1}) {
	  ${0}
	}
endsnippet
snippet cs
	case ${1}:
	  ${0}
endsnippet
snippet de
	default:
	  ${0}
endsnippet
snippet for
	for (var ${2:i} = 0, len = ${1:things}.length; $2 < len; ${3:++}$2) {
	  ${0:$1[$2]}
	}
endsnippet
snippet fore
	for (final ${2:item} in ${1:itemList}) {
	  ${0}
	}
endsnippet
snippet wh
	while (${1:/* condition */}) {
	  ${0}
	}
endsnippet
snippet dowh
	do {
	  ${0}
	} while (${0:/* condition */});
endsnippet
snippet as
	assert(${0:/* condition */});
endsnippet
snippet try
	try {
	  ${0:${VISUAL}}
	} catch (${1:Exception e}) {
	}
endsnippet
snippet tryf
	try {
	  ${0:${VISUAL}}
	} catch (${1:Exception e}) {
	} finally {
	}

endsnippet

snippet stless
	class $1 extends StatelessWidget {
		@override
		Widget build(BuildContext context) {
			return Container(
				$2
			);
		}
	}

endsnippet
# Flutter stateful widget

snippet stful
	class $1 extends StatefulWidget {
		@override
		_$1State createState() => _$1State();
	}

	class _$1State extends State<$1> {
		@override
		Widget build(BuildContext context) {
			return Container(
				$2
			);
		}
	}

endsnippet
# Flutter widget with AnimationController

snippet stanim
	class $1 extends StatefulWidget {
		@override
		_$1State createState() => _$1State();
	}

	class _$1State extends State<$1>
			with SingleTickerProviderStateMixin {
		AnimationController _controller;

		@override
		void initState() {
			super.initState();
			_controller = AnimationController(vsync: this);
		}

		@override
		void dispose() {
			super.dispose();
			_controller.dispose();
		}

		@override
		Widget build(BuildContext context) {
			return Container(
				$2
			);
		}
	}
endsnippet
