priority -60

snippet def "#define ..."
#define $1
endsnippet

snippet htemplate "header template following Google style" b
#import <Foundation/Foundation.h>

@class Bar;

/**
 * A sample class demonstrating good Objective-C style. All interfaces,
 * categories, and protocols (read: all non-trivial top-level declarations
 * in a header) MUST be commented. Comments must also be adjacent to the
 * object they're documenting.
 */
@interface Foo : NSObject

/** The retained Bar. */
@property(nonatomic) Bar *bar;

/** The current drawing attributes. */
@property(nonatomic, copy) NSDictionary<NSString *, NSNumber *> *attributes;

/**
 * Convenience creation method.
 * See -initWithBar: for details about @c bar.
 *
 * @param bar The string for fooing.
 * @return An instance of Foo.
 */
+ (instancetype)fooWithBar:(Bar *)bar;

/**
 * Initializes and returns a Foo object using the provided Bar instance.
 *
 * @param bar A string that represents a thing that does a thing.
 */
- (instancetype)initWithBar:(Bar *)bar NS_DESIGNATED_INITIALIZER;

/**
 * Does some work with @c blah.
 *
 * @param blah
 * @return YES if the work was completed; NO otherwise.
 */
- (BOOL)doWorkWithBlah:(NSString *)blah;

@end
endsnippet

snippet stemplate "source template for implementation of an interface " b
#import "Shared/Util/Foo.h"

@implementation Foo {
  /** The string used for displaying "hi". */
  NSString *_string;
}

+ (instancetype)fooWithBar:(Bar *)bar {
  return [[self alloc] initWithBar:bar];
}

- (instancetype)init {
  // Classes with a custom designated initializer should always override
  // the superclass's designated initializer.
  return [self initWithBar:nil];
}

- (instancetype)initWithBar:(Bar *)bar {
  self = [super init];
  if (self) {
    _bar = [bar copy];
    _string = [[NSString alloc] initWithFormat:@"hi %d", 3];
    _attributes = @{
      @"color" : [UIColor blueColor],
      @"hidden" : @NO
    };
  }
  return self;
}

- (BOOL)doWorkWithBlah:(NSString *)blah {
  // Work should be done here.
  return NO;
}

@end
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}$0
	return 0;
}
endsnippet

snippet im "#import" b
#import $0
endsnippet

snippet id "id variable" b
id $1 = $0;
endsnippet

snippet protocol "@protocol block" b
@protocol $1
$0
@end
endsnippet

snippet synth "@synthesize property" b
@synthesize ${1:p_name}=${2:instance_name};
$0
endsnippet

snippet interface "@interface block" b
@interface ${1:MyInterface}
$0
@end
endsnippet

snippet impl "@implementation interface" b
@implementation ${1:MyInterface}
$0
@end
endsnippet

snippet smethod "class level static method" b
+(${1:void}) ${2:func_name};
endsnippet

snippet imethod "instance method" b
-(${1:void}) ${2:func_name};
endsnippet

snippet autoreleasepool "@autoreleasepool block" b
@autoreleasepool {
	$0
}
endsnippet

snippet alloc "alloc space for object"
[${1:ClassName} alloc]$0
endsnippet

snippet allocinit "alloc and init"
[[${1:ClassName} alloc] init]$0
endsnippet

snippet iinit "init and dealloc method " b
-(id) init {
	$0
}

-(void) dealloc {
	
}
endsnippet

snippet @sel "@selector"
@selector
endsnippet

snippet superguard "check super init" b
if (!(self = [super init])) {
	return nil;
}
endsnippet

snippet if "if block" b
if (${1:true}) {
	$0
}
endsnippet

# Cocoa data types
snippet NSDict "NSDictionary"
NSDictionary
endsnippet

snippet NSStr "NSString"
NSString
endsnippet

snippet NSObj "NSOjbect"
NSObject
endsnippet

