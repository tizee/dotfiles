extends c

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet hackit "not sync with stdio"
auto hackit = [](){
	std::ios::sync_with_stdio(false); 
	std::cin.tie(0);
}();
endsnippet

snippet BinaryIndexdTree "" b
WIP
endsnippet

snippet BSearch "binary search" b
int BSearch(${1:vector<int> &sorted_list},${2:int key}){
	int left = 0, right = sorted_list.size()-1;
	while(left <= right){
		int mid = left + (right - left)/2;
		int val = sorted_list[mid];
		if( val == key ){
			return mid;
		} else if (val < key){
			left = mid + 1;
		}else{
			right = mid - 1;
		}
	}
	return left - 1;
}
endsnippet

snippet KMP "KMP algorithm" b
WIP
endsnippet

# should be compiled to a CLI tool
snippet BIGEDIAN "Verify Machine big edian" b
#define IS_BIG_ENDIAN (!*(unsigned char*)&(uint16_t){1})
endsnippet

# leap year validator
snippet LeapYear "Verify given year whether a leap year" b
bool isLeapYear(int year){
	return (year %4 ==0 && year % 100 !=0) || (year % 400 == 0);
}
endsnippet

snippet oj_template "useful macros for OJ" b
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>

#include <cmath>
#include <cstdio>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vector<int>> vvi;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;

#define endl "\n"
#define min(x, y) ((x) > (y) ? (y) : (x))
#define max(x, y) ((x) > (y) ? (x) : (y))
#define itoc(i) (char)(i + '0')
#define pb push_back
#define pob pop_back

#define FASTIO ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL)
#define ALL(a) a.begin(), a.end()
#define FR(i, n) for (ll i = 0; i < n; i++)
#define FOR(i, s, e) for (ll i = s; i < e; i++)
#define RFR(i, n) for (ll i = n - 1; i >= 0; i--)
#define RFOR(i, s, e) for (ll i = s; i >= e; i--)

#define DBall(a)                                                               \
  cerr << #a << " => ";                                                        \
  for (auto &i : a) {                                                          \
    cerr << i << " ";                                                          \
  }                                                                            \
  cerr << endl;
#define DBrange(a, k, n)                                                       \
  cerr << #a << " => ";                                                        \
  for (int i = k; i < n; i++) {                                                \
    cerr << a[i] << " ";                                                       \
  }                                                                            \
  cerr << endl;

const ll inf = 1e9, MOD = 1e9 + 7;

class Solution {
private:
public:
  // WRITE YOUR SOLUTION HERE
  void solve() {
	${0}
  }
};

int main() {
  auto start = std::chrono::high_resolution_clock::now();

#ifndef OJ_TEST
  freopen("test${1:`!p snip.rv = snip.basename`}/1", "r", stdin);
  freopen("test${1:`!p snip.rv = snip.basename`}/1.test.out", "w", stdout);
#endif

  FASTIO;
  Solution ans;
  int t = 1;
  cin >> t;
  while (t--) {
    ans.solve();
  }

  auto end = std::chrono::high_resolution_clock::now();
  auto elapsed =
      std::chrono::duration_cast<std::chrono::nanoseconds>(end - start);
  cerr << "Time spent: " << elapsed.count() * 1e-9 << "seconds.\n";
  return 0;
}
endsnippet

# vim:ft=snippets:
