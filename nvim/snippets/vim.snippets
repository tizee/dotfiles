# ========= Useful Utils ========== {{{

snippet docs "copyright etc for vimscript file" b
	" File: ${1:`g:UtilFilename('$1.vim', 'foo.vim')`}
	" Author: `g:MetaUserName()`
	" Email: `g:MetaUserEmail()`
	" Github: `g:MetaGitRepo()`
	" Description: ${0}
endsnippet

snippet redir "redirect messages" b
let ${1:command_output}= ''
redir => ${1:command_output}
silent ${2:command}
redir END
endsnippet

snippet checkpython "verify whether supports Python" b
let s:python = has('python') || has('python3')
endsnippet

snippet ruby "verify whether supports Ruby" b
let s:ruby = has('ruby') && (v:version >= 703 || v:version == 702 && has('patch374')) 
endsnippet

snippet winshell "vim verify support for running shell commands on Windows platform" b
if !has('nvim')
\ && (has('win32') || has('win32unix'))
\ && !has('multi_byte')
return s:err('Vim needs +multi_byte feature on Windows to run shell commands. Enable +iconv for best results.')
endsnippet

snippet is_win "test if windows platform" b
let s:is_win = has('win32') || has('win64')
endsnippet

snippet is_nvim "test if nvim" b
let s:is_nvim = has('nvim')
endsnippet

snippet continuation "Save cpo options for vim plugin" b
let s:saved_cpo = $cpo
set cpo&vim

${1:" Plugin body}

let &cpo=s:saved_cpo
unlet s:saved_cpo
endsnippet

snippet gvar "Global / configuration variable" b
if !exists("g:${1:MyUltraImportantVar}")
	let g:$1 = ${2:"${3:<tab>}"}
endif
endsnippet

snippet guard "script reload guard" b
if exists('${1:loaded_`!p snip.rv = snip.fn.replace('.','_')`}') || &cp${2: || v:version < 700}
	finish
endif
let g:$1 = 1$3
endsnippet

# }}}

# ========= Functions ==========  {{{ 

# Without the exclamation mark it would be an error to re-define a function,
# with the exclamation mark the new definition can replace the old one. Since
# Vim script files can be reloaded several times over the course of a session
# it is best to use the exclamation mark unless you really know what you are
# doing.

# Unscoped function names have to start with a capital letter
# Scoped function names may start with a lower-case letter

# Function definitions can have special qualifiers following the argument list.
# Range functions define two implicit arguments, which will be set to the range
# of the ex-command
# Aborting functions, abort once error occurs (|:func-abort|)
# 
snippet funcb "current buffer scope function" b
function! b:${1:function_name}($2)
	${3:" body}
endfunction
endsnippet

snippet funcw "current window scope function" b
function! w:${1:function_name}($2)
	${3:" body}
endfunction
endsnippet

snippet funct "current tab scope function" b
function! t:${1:function_name}($2)
	${3:" body}
endfunction
endsnippet

snippet funcl "closure local to current function" b
function! l:${1:function_name}($2)
	${3:" body}
endfunction
endsnippet

snippet funcs "current script scope function" b
function! s:${1:function_name}($2)
	${3:" body}
endfunction
endsnippet

snippet funcg "global scope function" b
function! g:${1:function_name}($2)
	${3:" body}
endfunction
endsnippet

snippet funcp "plugin scope function in defined in autoload/foo/bar.vim" b
function! ${1:foo}#${2:bar}#${3:function_name}($4) ${5:abort}
	${3:" body}
endfunction
endsnippet

# }}}

# ========= Variables ========== {{{ 
snippet vscope "built in vim scope variables" b
v:${1:version}
endsnippet

snippet letvreg "vim register" b
let @${1:"}=${2:""}
endsnippet

snippet letenv "vim environment variable" b
let $${1:TERM}=${2:""}
endsnippet

snippet letopt "vim option" b
let &${1:sw}=${2:2}
endsnippet

snippet printenv "print env in scope" b
echo ${1:b}:
endsnippet

snippet const "constant var" b
const ${1:x} = ${2:0}
endsnippet

snippet gref "global function reference" b
let ${1:IsNum} = ${2:\\{ x -> type(x) == type(0) \\} } 
endsnippet

snippet letl "local variable inside a function" b
let l:${1:var}=${2:value}
endsnippet

snippet lets "current sciprt scope variable" b
let s:${1:var}=${2:value}
endsnippet

snippet unpack "list unpack"
let [${1:a,b};${2:others}] = ${3:list} 
endsnippet

snippet letg "let g:var" b
let g:${1:varname}=${2:value}
endsnippet

snippet lets "let s:var" b
let s:${1:varname}=${2:value}
endsnippet

# }}}

# ========= Control-flow ========== {{{ 

snippet ifelif "if-elseif" b
if ${1:condition1}
	${2:" code}
elseif ${3: condition2}
	${4:" code}
else
	${5:" code}
endif
endsnippet

snippet if "if-endif" b
if $1
	$2
endif 
endsnippet

snippet for "for in" b
for ${1:i} in ${2:list}
	${5:" code}
endfor
endsnippet

snippet forr "for in ranger" b
for ${1:i} in range(${2:start}, ${3:end}, ${4:step})
	${5:" code}
endfor
endsnippet

snippet fork "for in keys" b
for ${1:symbol} in keys(${2:dictionary})
	${3:" code}
endfor
endsnippet

snippet forval "for in values" b
for ${1:value} in values(${2:dictionary})
	${3:" code}
endfor
endsnippet

snippet foritem "for in items" b
for ${1:[symbol, value]} in items(${2:dictionary})
	${3:" code}
endfor
endsnippet

snippet while "while-loop" b
while ${1:condition}
	${2:" code}
endwhile
endsnippet

snippet trycatch "try-catch-finally" b
try
	${1:" code}
catch /${2:ErrRegex}/
	${3:" code}
catch /.*/
	${4:" code}
finally
	${5:" code}
endtry
endsnippet

# }}}

# Dictionary functions, poor man's OOP methods (|Dictionary-function|)

# Calling functions (|:call|)

# Function namespaces (|write-library-script|, |autoload|)

# Must be defined in autoload/foo/bar.vim
# Namspaced function names do not have to start with a capital letter
# function! foo#bar#log(value)
#     echomsg value
# endfunction
# 
# call foo#bar#log('Hello')

# ========= Autocommand ========== {{{ 
# list all autocommands use :autocmd
# :help autocmd-events for a complete list of events
snippet autocmd "autocommand" b
autocmd ${1:[group]} ${2:events} ${3:file_pattern} ${4:[++nested]} ${5:command}
endsnippet

# Generally, commands executed as the result of an autocommand event will not
# trigger any new events.  If you read a file in response to a FileChangedShell
# event, it will not trigger the autocommands that would set the syntax, for
# example.  To make the events triggered, add the "++nested" flag: >
# 
# 	:autocmd FileChangedShell * ++nested  edit

# 	*		Match any character any number of times
#	?		Match any character once
#	[abc]		Match the character a, b or c
#	.		Matches a dot
#	a{b,c}		Matches "ab" and "ac"

snippet augroup "group of autocmds" b
augroup ${1:name}
	autocmd ${2:events} ${3:commands}
augroup END "${1:name}
endsnippet
# }}}

# Command {{{
# see usr_40.txt

# use ! to redefine command with the same name

# zero arguments is the default, you do not need to add
# "-nargs=0".  The other values of -nargs are as follows:
# 
# 	-nargs=0	No arguments
# 	-nargs=1	One argument
# 	-nargs=*	Any number of arguments
# 	-nargs=?	Zero or one argument
# 	-nargs=+	One or more arguments
# inside the command definition, the arguments are represented by the <args> keyword

snippet command0 "command with zero arguments" b
command! -nargs=${1:0} ${2:CommandName} ${3:<space>}
endsnippet

snippet command1 "command with one argument" b
command! -nargs=${1:1} ${2:CommandName} ${3::echo "<args>"}
endsnippet

snippet command "command with any number of arguments" b
command! -nargs=${1:*} ${2:CommandName} ${3:actions}
endsnippet
snippet command? "command with zero or more arguments" b
command! -nargs=${1:?} ${2:CommandName} ${3:actions}
endsnippet

snippet command+ "command with one or more arguments" b
command! -nargs=${1:+} ${2:CommandName} ${3:actions}
endsnippet

snippet command+ "command arguments with special characters escaped" b
command! -nargs=${1:+} ${2:CommandName} ${3::echo <q-args>}
endsnippet
# Some commands take a range as their argument.  To tell Vim that you are
# defining such a command, you need to specify a -range option.  The values for
# this option are as follows:
# 
# 	-range		Range is allowed; default is the current line.
# 	-range=%	Range is allowed; default is the whole file.
# 	-range={count}	Range is allowed; the last number in it is used as a
# 			single number whose default is {count}.
# 
# When a range is specified, the keywords <line1> and <line2> get the values of
# the first and last line in the range.  For example, the following command
# defines the SaveIt command, which writes out the specified range to the file
# "save_file": >
# 
# 	:command -range=% SaveIt :<line1>,<line2>write! save_file
snippet commandrange "command with a range as its argument" b
command! -range=${1:count} ${2:CommandName} :<line1>,<line2>${3:actions}
endsnippet

# Some of the other options and keywords are as follows:
# 
# 	-count={number}		The command can take a count whose default is
# 				{number}.  The resulting count can be used
# 				through the <count> keyword.
# 	-bang			You can use a !.  If present, using <bang> will
# 				result in a !.
# 	-register		You can specify a register.  (The default is
# 				the unnamed register.)
# 				The register specification is available as
# 				<reg> (a.k.a. <register>).
# 	-complete={type}	Type of command-line completion used.  See
# 				|:command-completion| for the list of possible
# 				values.
# 	-bar			The command can be followed by | and another
# 				command, or " and a comment.
# 	-buffer			The command is only available for the current
# 				buffer.

# Finally, you have the <lt> keyword.  It stands for the character <.  Use this
# to escape the special meaning of the <> items mentioned.

snippet delcom "Delete a user command" b
delcommand ${1:CommandName}
endsnippet

snippet comcl "Delete all the user commands" b
comclear
endsnippet
# }}}

# Built-in funcs {{{
snippet sruntime "source first match in runtime paths" b
runtime ${1:plugin/my-plugin.vim}
endsnippet

snippet get "get dict/list item with key/index" b
get(${1:dict_or_list},${2:key_or_index},${3:default})
endsnippet

snippet getfunc "get item from Funcref. Item could be function name, function, dict, args" b
get(${1:func},${2:item})
endsnippet

#		If {list} is given and it is |TRUE|, a List will be returned.
#		Otherwise the result is a String and when there are several
#		matches, they are separated by <NL> characters.
#
#		If the expansion fails, the result is an empty string.  A name
#		for a non-existing file is not included, unless {expr} does
#		not start with '%', '#' or '<', see below.
snippet expand "expand wildcards or keywords in expression" b
expand(${1:expr},${2:nosuf},${3:list})
endsnippet

snippet extend "append if list/ add entries if dict" b
extend(${1:exp1},${2:expr2},${3:expr3})
endsnippet

snippet colcursor "column of cursor" b
col(".")
endsnippet

snippet coleol "column of cursor line plus one" b
col("$")
endsnippet

snippet colmark "column of given mark" b
col("'". "${1:mark_name}")
endsnippet

# .	    the cursor position
# $	    the last line in the current buffer
# 'x	    position of mark x (if the mark is not set, 0 is
#   returned)
# w0	    first line visible in current window (one if the
#   display isn't updated, e.g. in silent Ex mode)
# w$	    last line visible in current window (this is one
#   less than "w0" if no lines are visible)
# v	    In Visual mode: the start of the Visual area (the
#   cursor is the end).  When not in Visual mode
#   returns the cursor position.  Differs from |'<| in
#   that it's updated right away.
snippet line "line number of the file position given with expr" b
line(${1:expr})
endsnippet

snippet linemark "line number of the file position given with expr" b
line("'" . ${1:marker})
endsnippet


snippet runtime "read Ex commands from file in each directory given by runtimepath or packpath" b
runtime${1:!} ${2:where} ${3:files...}
endsnippet

snippet packadd "Search for an optional plugin directory in 'packpath' and source any plugin files found." b
packadd${1:!} ${2:name}
endsnippet

#		The result is the String returned by the function.  If the
#		function returns NULL, this will appear as an empty string ""
#		to Vim.
#		If the function returns a number, use libcallnr()!
#		If {argument} is a number, it is passed to the function as an
#		int; if {argument} is a string, it is passed as a
#		null-terminated string.
#		This function will fail in |restricted-mode|.
snippet libcall "return string - call function in run-time library with single argument" b
libcall(${1:libname},${2:funcname},${3:argument})
endsnippet

snippet libcall "return an int - call function in run-time library with single argument" b
libcallnr(${1:libname},${2:funcname},${3:argument})
endsnippet

snippet getline "return a line list - get text lines from buffer" b
getline(${1:start},${2:end})
endsnippet

snippet inputlist "prompt from string list" b
inputlist(${1:textlist})
endsnippet
# }}}

# List functions {{{
snippet calllist "call a funciton with an argument list" b
call(${1:funciton},${2:list})
endsnippet

snippet len "get number of items in list" b
len(${1:list})
endsnippet

snippet max "get max value in list" b
max(${1:list})
endsnippet

snippet min "get min value in list" b
min(${1:list})
endsnippet

snippet count "return an int - count times of char appears in list" b
count(${1:list},${2:value})
endsnippet

snippet index "return an int - get idnex of first value in list" b
index(${1:list},${2:value})
endsnippet

snippet join "return string - create string from list items" b
join(${1:list},'${2:sperator}')
endsnippet

snippet map "return list - apply to each item in list" b
map(${1:list},${2:expr})
endsnippet

snippet sumlist "add up all list item" b
join(${1:list},'+')
endsnippet

snippet reltime "get a time value" b
reltime(${1:[start]},${2:[end]})
endsnippet

snippet reltimefloat "return a float - pass in the time value, unit in second" b
reltimefloat(${1:time})
endsnippet

snippet isd "is directory"
isdirectory(${0})
endsnippet

# }}}


# Type inference {{{
# echo  type(my_var) == v:t_bool        | " Explicit Boolean
snippet type "type" b
type(${1:var})
endsnippet

snippet vnumber "v:t_number Number" b
v:t_number
endsnippet

snippet vstring "v:t_string String" b
v:t_string
endsnippet

snippet vfunc "v:t_func Funcref" b
v:t_func
endsnippet

snippet vlist "v:t_list List" b
v:t_list
endsnippet

snippet vdict "v:t_dict Dict" b
v:t_dict
endsnippet

snippet vfloat "v:t_float Float" b
v:t_float
endsnippet

snippet vbool "v:t_bool Explicit Boolean" b
v:t_bool
endsnippet

# }}}

# Neovim Popup {{{
snippet nvimpopup "create temporary popup window in neovim" b
funciton s:create_popup(hl,opts) abort
	" listed: sets 'buflisted'
	" scractch: creates a "throwaway" scratch-buffer for temporary work 
	let l:buf = nvim_create_buf(v:false,v:true)
	let l:config = extend({'relative': 'editor',\
													'style': 'minimal'}, a:opts)
	" remove border from opts and return it
	let border = has_key(opts,'border')? remove(opts, 'border'): []
	let l:win = nvim_open_win(buf, v:true, config)
	" set floating window normal text highlight
	call setwinvar(l:win, '&winhiglight', 'NormalFloat:'..a:hl )
	" disable screen columns highlighting for quick redrawing
	call setwinvar(l:win,'&colorcolumn','')
	if !empty(border)
		call nvim_buf_set_lines(buf,0,-1,v:true,border)
	endif
	return buf
endfunction
endsnippet
# }}}

# vim: ft=snippets foldmethod=marker
