#!/usr/bin/env python3
import argparse
import os
import sys
from typing import Optional

def apply_caesar(text: str, shift: int) -> str:
    """Apply Caesar cipher with given shift to input text.

    Args:
        text: Input string to encrypt/decrypt
        shift: Number of positions to shift (1-25)

    Returns:
        Encrypted/decrypted string
    """
    result = []
    for char in text:
        if char.isupper():
            result.append(chr((ord(char) - ord('A') + shift) % 26 + ord('A')))
        elif char.islower():
            result.append(chr((ord(char) - ord('a') + shift) % 26 + ord('a')))
        else:
            result.append(char)
    return ''.join(result)

def get_input_text(args: argparse.Namespace) -> str:
    """Determine input source based on availability and priority:
    1. Pipe/redirect input (stdin)
    2. Input file (-i/--input)
    3. Command line argument (text)
    """
    # Check for pipe/redirect input first
    if not sys.stdin.isatty():  # Data is being piped in or redirected
        if args.text or args.input:
            print("Warning: Ignoring command line text/file input because pipe/redirect detected",
                  file=sys.stderr)
        return sys.stdin.read()

    # Next check for file input
    if args.input:
        if args.text:
            print("Warning: Ignoring command line text because file input specified",
                  file=sys.stderr)
        try:
            with open(args.input, 'r') as f:
                return f.read()
        except IOError as e:
            raise ValueError(f"Input file error: {e}")

    # Finally use command line text
    if args.text:
        return args.text

    # No input found
    raise ValueError("No input provided (use pipe, file, or command line argument)")

def main():
    # Get script name without extension if executed from PATH
    script_name = os.path.basename(sys.argv[0])
    if script_name.endswith('.py'):
        script_name = script_name[:-3]

    parser = argparse.ArgumentParser(
        description=f"{script_name} - Intelligent Caesar cipher tool with ROT13 optimization",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=f"""Usage Examples:
  # Basic encryption/decryption
  {script_name} "hello" -n 3       # Encrypt with shift 3 → "khoor"
  {script_name} "khoor" -n 3 -d    # Decrypt with shift 3 → "hello"

  # Automatic ROT13 handling (self-reversible)
  {script_name} "secret" -n 13     # Encrypt → "frperg"
  {script_name} "frperg" -n 13     # Decrypt → "secret"

  # File operations
  {script_name} -n 13 -i input.txt -o secret.txt
  {script_name} -n 5 -d -i encrypted.txt -o plain.txt

  # Pipe support
  cat document.txt | {script_name} -n 7 > encrypted.txt
  {script_name} -n 7 -d < encrypted.txt
""")

    # Argument definitions
    parser.add_argument("text", nargs='?',
                      help="Input text (mutually exclusive with file/pipe input)")
    parser.add_argument("-n", "--shift", type=int, required=True,
                      help="Shift value (1-25, 13 enables ROT13 auto-handling)")
    parser.add_argument("-d", "--decrypt", action="store_true",
                      help="Decryption mode (ignored for ROT13)")
    parser.add_argument("-i", "--input",
                      help="Input file (overrides text argument)")
    parser.add_argument("-o", "--output",
                      help="Output file (default: stdout)")
    parser.add_argument("-v", "--verbose", action="store_true",
                      help="Verbose mode (default: off)")

    args = parser.parse_args()

    # Validate shift value
    if not 1 <= args.shift <= 25:
        parser.error("Shift value must be between 1 and 25")

    try:
        text = get_input_text(args)
    except ValueError as e:
        parser.error(str(e))

    # Process text
    if args.shift == 13:  # ROT13 mode
        result = apply_caesar(text, 13)
        action = "ROT13"
    else:  # Standard Caesar cipher
        effective_shift = -args.shift if args.decrypt else args.shift
        result = apply_caesar(text, effective_shift)
        action = "Decrypted" if args.decrypt else "Encrypted"

    # Handle output
    if args.output:
        try:
            with open(args.output, 'w') as f:
                f.write(result)
        except IOError as e:
            print(f"Error writing output: {e}", file=sys.stderr)
            sys.exit(1)
    else:
        if args.verbose:
            print(f"{action} (shift {args.shift}): {result}", file=sys.stderr)
            print(result, end="")
        else:
            print(result, end="")

if __name__ == "__main__":
    main()

